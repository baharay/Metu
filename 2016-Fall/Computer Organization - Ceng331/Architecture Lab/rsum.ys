# Bahar Aydemir 
# Execution begins at address 0 
	.pos 0
init:	irmovq stack, %rsp  	# Set up stack pointer

	call main
	halt			# Terminate program 

# Sample linked list
.align 8
ele1:
	.quad 0x00a
	.quad ele2
.align 8
ele2:
	.quad 0x0b0
	.quad ele3
.align 8
ele3:
	.quad 0xc00
	.quad 0

main:	irmovq ele1,%rdi
		call rsum_list		# sum(array, 4)
		ret


# start in %rdi, count in %rsi
rsum_list:	xorq %rax,%rax	     # sum = 0
		jmp     test         # Goto test

func:		mrmovq (%rdi),%rdx 
		mrmovq 0x8(%rdi),%rdi
		pushq %rdx
		call rsum_list
		popq %rdx
		addq %rdx,%rax       # Add to sum  
		ret
						    
		
test:
	andq   %rdi, %rdi
	jg   func          # Stop when 0

	ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:

